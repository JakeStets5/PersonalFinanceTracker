<Window x:Class="PersonalFinanceTracker.Views.SignUpWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:local="clr-namespace:PersonalFinanceTracker.Views"
        xmlns:uiscripts="clr-namespace:PersonalFinanceTracker.UIScripts"
        mc:Ignorable="d"
            Height="525" Width="425"
    Background="#1c2b2e">
    <!-- Change Background Color -->
    <Window.Resources>
        <uiscripts:ErrorMessageVisibilityConverter x:Key="ErrorMessageVisibilityConverter" />
        <uiscripts:PlaceholderTextVisibilityConverter x:Key="PlaceholderTextVisibilityConverter" />
        <uiscripts:InvertedBoolToVisibilityConverter x:Key="InvertedBoolToVisibilityConverter"/>
        <uiscripts:MultiParameterConverter x:Key="MultiParameterConverter"/>
        <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>

        <!-- Username Field Style -->
        <Style TargetType="TextBox">
            <!-- Default properties -->
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="FontFamily" Value="Montserrat" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="BorderBrush" Value="#597A7F" />
            <Setter Property="BorderThickness" Value="2" />
            <Setter Property="Background" Value="#C6B9CD" />
            <Setter Property="Padding" Value="5" />

            <!-- Define custom template -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border x:Name="BorderElement"
                                CornerRadius="4"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ScrollViewer x:Name="PART_ContentHost" Margin="0" />       
                        </Border>
                        <ControlTemplate.Triggers>
                            <!-- Hover effect -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="BorderElement" Property="BorderBrush" Value="#597A7F" />
                            </Trigger>
                            <!-- Focus effect -->
                            <Trigger Property="IsFocused" Value="True">
                                <Setter TargetName="BorderElement" Property="BorderBrush" Value="#597A7F" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Password Field Style -->
        <Style TargetType="PasswordBox">
            <!-- Default properties -->
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="FontFamily" Value="Montserrat" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="BorderBrush" Value="#597A7F" />
            <Setter Property="BorderThickness" Value="2" />
            <Setter Property="Background" Value="#C6B9CD" />
            <Setter Property="Padding" Value="5" />

            <!-- Define custom template -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="PasswordBox">
                        <Border x:Name="BorderElement" 
                                CornerRadius="4"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ScrollViewer x:Name="PART_ContentHost" Margin="0" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <!-- Hover effect -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="BorderElement" Property="BorderBrush" Value="#597a7f" />
                            </Trigger>
                            <!-- Focus effect -->
                            <Trigger Property="IsFocused" Value="True">
                                <Setter TargetName="BorderElement" Property="BorderBrush" Value="#597a7f" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Button Style -->
        <Style TargetType="Button">
            <Setter Property="Foreground" Value="White" />
            <Setter Property="FontFamily" Value="Montserrat" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Background" Value="Transparent" />
            <!-- Button Background Color -->
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Padding" Value="10" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Width" Value="100" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                            CornerRadius="4">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Label Style -->
        <Style TargetType="Label">
            <Setter Property="Foreground" Value="White" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="FontFamily" Value="Montserrat" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        </Style>

        <!-- Error Message Style -->
        <Style TargetType="TextBlock">
            <Setter Property="Foreground" Value="#A71F1A" />
            <Setter Property="FontFamily" Value="Montserrat" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="TextDecorations" Value="Underline" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        </Style>

    </Window.Resources>

    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        
        <!-- Error Messages -->
		<StackPanel Grid.Row="0">
			<TextBlock x:Name="UsernameErrorField" 
                       Text= "{Binding UsernameError}"
                       Visibility="{Binding UsernameError, Converter={StaticResource ErrorMessageVisibilityConverter}}"
                       TextDecorations="None"
                       Cursor="Arrow"/>
		</StackPanel>

        <StackPanel Grid.Row="1">
            <TextBlock x:Name="EmailErrorField" 
                       Text="{Binding EmailError}" 
                       Visibility="{Binding EmailError, Converter={StaticResource ErrorMessageVisibilityConverter}}" 
                       TextDecorations="None"
                       Cursor="Arrow"/>
        </StackPanel>

        <StackPanel Grid.Row="2">
            <TextBlock x:Name="PasswordErrorField" 
                       Text="{Binding PasswordError}" 
                       Visibility="{Binding PasswordError, Converter={StaticResource ErrorMessageVisibilityConverter}}" 
                       TextDecorations="None"
                       TextWrapping="Wrap"
                       Cursor="Arrow"/>
		</StackPanel>
		
		<StackPanel Grid.Row="3">
            <TextBlock x:Name="ConfirmPasswordErrorField" 
                       Text="{Binding ConfirmPasswordError}" 
                       Visibility="{Binding ConfirmPasswordError, Converter={StaticResource ErrorMessageVisibilityConverter}}" 
                       TextDecorations="None"
                       Cursor="Arrow"/> 
		</StackPanel>

        <!-- Username Field -->
        <StackPanel Grid.Row="4" Margin="0,0,0,10">
            <Label Content="Username*" />
            <Grid>
                <!-- Username Box -->
                <TextBox x:Name="UsernameField"
                         Text="{Binding Username, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                
                <!-- Placeholder Text -->
                <TextBlock Text="Enter your username" 
                       Foreground="Black" 
                       Margin="10,0,0,0" 
                       IsHitTestVisible="False"
                       VerticalAlignment="Center"
                       Visibility="{Binding Text, ElementName=UsernameField, Converter={StaticResource PlaceholderTextVisibilityConverter}}" />
            </Grid>
        </StackPanel>

        <!-- Email Field -->
        <StackPanel Grid.Row="5" Margin="0,0,0,10">
            <Label Content="Email*" />
            <Grid>
                <!-- Email Box -->
                <TextBox x:Name="EmailField" 
                         Text="{Binding Email, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                
                <!-- Placeholder Text -->
                <TextBlock Text="Enter your email" 
                           Foreground="Black" 
                           Margin="10,0,0,0" 
                           IsHitTestVisible="False"
                           VerticalAlignment="Center"
                           Visibility="{Binding Text, ElementName=EmailField, Converter={StaticResource PlaceholderTextVisibilityConverter}}" />
            </Grid>
        </StackPanel>

        <!-- Password Field -->
		<StackPanel Grid.Row="6" Margin="0,0,0,10" Orientation="Vertical">
			<Label Content="Password*" />
			<Grid>
				<!-- Password Box -->
                <PasswordBox x:Name="PasswordField" PasswordChar="●"
                             Visibility="{Binding IsPasswordVisible, Converter={StaticResource InvertedBoolToVisibilityConverter}}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PasswordChanged">
                            <!-- Invokes a command in the ViewModel when the event is triggered -->
                            <i:InvokeCommandAction Command="{Binding PasswordChangedCommand}">
                                <i:InvokeCommandAction.CommandParameter>
                                    <!-- Passing multiple parameters to the command using MultiBinding -->
                                    <MultiBinding Converter="{StaticResource MultiParameterConverter}">
                                        <Binding ElementName="PasswordField" />
                                        <Binding ElementName="PasswordTextBox" />
                                        <Binding Source="{StaticResource MainPasswordIdentifier}" />
                                    </MultiBinding>
                                </i:InvokeCommandAction.CommandParameter>
                            </i:InvokeCommandAction>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </PasswordBox>

                <!-- Placeholder Text -->
				<TextBlock x:Name="PasswordPlaceholderText"  Text="Enter your password"
                   Foreground="Black"
                   Margin="10,0,0,0"
                   IsHitTestVisible="False"
                   VerticalAlignment="Center"
                   Visibility="{Binding IsPasswordPlaceholderVisible, Converter={StaticResource PlaceholderTextVisibilityConverter}}" />

				<!-- Text Box (visible password) -->
                <TextBox x:Name="PasswordTextBox" 
                        Text="{Binding TempPassword, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        Visibility="{Binding IsPasswordVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="TextChanged">
                            <i:InvokeCommandAction Command="{Binding PasswordChangedCommand}">
                                <i:InvokeCommandAction.CommandParameter>
                                    <MultiBinding Converter="{StaticResource MultiParameterConverter}">
                                        <Binding ElementName="PasswordField" />
                                        <Binding ElementName="PasswordTextBox" />
                                        <Binding Source="{StaticResource MainPasswordIdentifier}" />
                                    </MultiBinding>
                                </i:InvokeCommandAction.CommandParameter>
                            </i:InvokeCommandAction>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>

                <!-- Toggle Button -->
                <Button x:Name="TogglePasswordButton" Width="30" Height="30"
						HorizontalAlignment="Right" VerticalAlignment="Center"
					    Command="{Binding TogglePasswordVisibilityCommand}"
                        CommandParameter="{Binding ElementName=TogglePasswordButton}">
                    <Image x:Name="TogglePasswordIcon" Width="20" Height="20"
						   Source="../Assets/Images/SignUpWindowIcons/closed_eye_icon.png" />
				</Button>
			</Grid>

			<TextBlock x:Name="PasswordRequirementTextBlock"
					   Text="Must be at least 8 characters long, contain one number,"
					   Foreground="White" VerticalAlignment="Bottom" Cursor="Arrow" />
			<TextBlock x:Name="PasswordRequirementTextBlock2"
					   Text="uppercase letter, and symbol: !@#$%^*"
					   Foreground="White" VerticalAlignment="Bottom" Cursor="Arrow"/>
		</StackPanel>

		<!-- Confirm Password Field -->
        <StackPanel Grid.Row="7" Margin="0,0,0,10" Orientation="Vertical">
            <Label Content="Re-enter Password*" />
            <Grid>
                <!-- Confirm Password Box -->
                <PasswordBox x:Name="ConfirmPasswordField" PasswordChar="●"
                             Visibility="{Binding IsConfirmPasswordVisible, Converter={StaticResource InvertedBoolToVisibilityConverter}}">
                    <!-- Attach behavior to PasswordChanged event -->
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PasswordChanged">
                            <!-- Invoke ViewModel command on event trigger -->
                            <i:InvokeCommandAction Command="{Binding PasswordChangedCommand}">
                                <i:InvokeCommandAction.CommandParameter>
                                    <MultiBinding Converter="{StaticResource MultiParameterConverter}">
                                        <Binding ElementName="ConfirmPasswordField"/>
                                        <Binding ElementName="ConfirmPasswordTextBox"/>
                                        <Binding Source="{StaticResource ConfirmPasswordIdentifier}" />
                                    </MultiBinding>
                                </i:InvokeCommandAction.CommandParameter>
                            </i:InvokeCommandAction>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </PasswordBox>

                <!-- Placeholder Text -->
                <TextBlock x:Name="ConfirmPasswordPlaceholderText"  Text="Re-enter your password"
                   Foreground="Black"
                   Margin="10,0,0,0"
                   IsHitTestVisible="False"
                   VerticalAlignment="Center"
                   Visibility="{Binding IsConfirmPasswordPlaceholderVisible, Converter={StaticResource PlaceholderTextVisibilityConverter}}" />

                <!-- Text Box (visible password) -->
                <TextBox x:Name="ConfirmPasswordTextBox" 
                         Text="{Binding ConfirmTempPassword, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 Visibility="{Binding IsConfirmPasswordVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="TextChanged">
                            <i:InvokeCommandAction Command="{Binding PasswordChangedCommand}">
                                <i:InvokeCommandAction.CommandParameter>
                                    <MultiBinding Converter="{StaticResource MultiParameterConverter}">
                                        <Binding ElementName="ConfirmPasswordField"/>
                                        <Binding ElementName="ConfirmPasswordTextBox"/>
                                        <Binding Source="{StaticResource ConfirmPasswordIdentifier}" />
                                    </MultiBinding>
                                </i:InvokeCommandAction.CommandParameter>
                            </i:InvokeCommandAction>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    
                </TextBox>

                <!-- Toggle Button -->
                <Button x:Name="ToggleConfirmPasswordButton" Width="30" Height="30"
					HorizontalAlignment="Right" VerticalAlignment="Center"
				    Command="{Binding ToggleConfirmPasswordVisibilityCommand}"
                    CommandParameter="{Binding ElementName=ToggleConfirmPasswordButton}">
                    <Image x:Name="ToggleConfirmPasswordIcon" Width="20" Height="20"
					   Source="../Assets/Images/SignUpWindowIcons/closed_eye_icon.png" />
                </Button>
            </Grid>
        </StackPanel>

        <!-- Sign Up Button -->
        <Button x:Name="SignUpButton" 
                Height="35"  
                Grid.Row="8" 
                Content="Sign Up" 
                Foreground="White" 
                Background="#597a7f"
                Command="{Binding SignUpCommand}"/>

        <!-- Required Fields -->
        <TextBlock Grid.Row="9" Text="* indicates required field"  TextDecorations="None"
               Foreground="White" Cursor="Arrow"
               HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" />
    </Grid>
</Window>
